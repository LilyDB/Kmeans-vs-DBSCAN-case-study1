# -*- coding: utf-8 -*-
"""Kmeans vs DBSCAN case1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1FT8Z_92U9XnwN6jNCfjejiaXsLOCDMx0
"""

!pip install plotly

# Commented out IPython magic to ensure Python compatibility.
# array, dataframe manipulation
import math
import numpy as np
import os
import pandas as pd
from six import iteritems
from functools import reduce

# cluster
from sklearn import metrics
from sklearn.cluster import OPTICS, cluster_optics_dbscan,DBSCAN 
from sklearn.cluster import KMeans
from sklearn.metrics import silhouette_score

# plot
import seaborn as sns
import matplotlib.pyplot as plt
import matplotlib.gridspec as gridspec
sns.set(rc={'figure.figsize':(11.7,8.27)})


# %matplotlib inline
np.random.seed(9999)

df = pd.read_csv('cluster.csv',sep=";")
df_for_cluster = df[['alive_pct','purchase_pct']]

print(df.head())
print(df_for_cluster.head())

"""Why and when to use?

DBSCAN

Used when we don't have to assign number of clusters Manhattan distance if the input variables are not similar in type (such as age, gender, height, etc.). Euclidean distance becomes a poor choice when the number of dimensions increases.

Kmeans

Use when input variables are in similar in type
"""

def dbscan_kmeans_c(cluster_type,
                    scaled_df,
                    raw_df,
                    k=None,
                    eps=None,
                    min_samples=None,
                    metric=None):
  """
  Input:
  scaled_df:      scaled data frame ready for clustering, sharing same indexes with raw_df
  metric:         'euclidean' for example euclidean distance
  Output:         orginal dataframe with cluster labelling
  """
  try:
    if cluster_type=='dbscan':
      dbscan = DBSCAN(eps,
                      min_samples, 
                      metric=metric)
      c = dbscan.fit(scaled_df)
      
    elif cluster_type=='kmeans':
      kmeans = KMeans(n_clusters=k)
      c = kmeans.fit(scaled_df)
      
    cluster_map = pd.DataFrame()
    cluster_map['cluster'] = c.labels_
    cluster = pd.concat([cluster_map,
                         raw_df],  
                        axis=1)
    return cluster
    
  except ArithmeticError:
    var_exists = False
    
  else:
    var_exists = True
    
  if not var_exists:
    print("no data loaded...")
    return 0


# common functions
def cluster_plot(df):
  #Use seaborn package    
  sns.scatterplot(data=df, 
                  x="alive_pct", 
                  y="purchase_pct",
                  hue="cluster",
                  legend="full",
                  marker="x"
                  )
    

    
def groupby_cluster(df,title):
    print(title)
    agg = { 'alive_pct': 'mean',
           'purchase_pct': 'mean'}

    print('alive number: ')
    print(
          df.groupby('cluster')\
          .agg(agg)\
          .reset_index()\
          .sort_values('cluster', 
                       ascending=False)
         )


    print('density per cluster ')
    df['index'] = df.index
    print(
          df.groupby(['cluster'])['index']\
                        .aggregate('count')\
                        .reset_index()\
                        .sort_values('cluster', 
                                     ascending=True)
          )
    

def silhouette_plot(df):
    
  silhouette_coefficients = []
  
  for k in range(2, 11):
      kmeans = KMeans(n_clusters=k)
      kmeans.fit(df)
      score = silhouette_score(df, 
                               kmeans.labels_)
      silhouette_coefficients.append(score)
      silhouette = silhouette_score(df, 
                                    kmeans.labels_).round(2)
        
  plt.plot(range(2, 11), 
           silhouette_coefficients)
  plt.xlabel("Number of Clusters")
  plt.ylabel("Silhouette Coefficient")
  plt.title('silhouette score: '+str(silhouette))
  plt.show()

dbscan = dbscan_kmeans_c(cluster_type='dbscan',
                         scaled_df=df_for_cluster,
                         raw_df=df,
                         k=None,
                         eps=0.01,
                         min_samples=7,
                         metric='euclidean')

groupby_cluster(df=dbscan,
                title='dbscan')

cluster_plot(dbscan)

"""Kmeans cluster"""

silhouette_plot(df_for_cluster)

kmeans = dbscan_kmeans_c(cluster_type='kmeans',
                         scaled_df=df_for_cluster,
                         raw_df=df,
                         k=4,
                         eps=None,
                         min_samples=None,
                         metric=None)

groupby_cluster(kmeans,'kmeans')

cluster_plot(kmeans)